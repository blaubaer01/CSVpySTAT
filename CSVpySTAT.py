#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.1
#  in conjunction with Tcl version 8.6
#    Feb 16, 2022 09:52:21 PM CET  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import filedialog as fd
import pandas as pd
from tabulate import tabulate
from tksheet import Sheet
import seaborn as sns
import matplotlib.pyplot as plt
import scipy as spy
from scipy.stats import shapiro

import numpy as np
from outliers import smirnov_grubbs as grubbs
from tableview import file_in_html
from charts import boxplot_single


import CSVpySTAT_support


############################statistic variables
#########################################################################################
# n   0 1     2      3      4      5      6      7      8      9      10
A2 = [0,0, 1.880, 1.023, 0.729, 0.577, 0.483, 0.419, 0.373, 0.337, 0.308]
D3 = [0,0, 0,     0,     0,     0,     0,     0.076, 0.136, 0.184, 0.223]
D4 = [0,0, 3.267, 2.575, 2.282, 2.115, 2.004, 1.924, 1.864, 1.816, 1.777]
# n   0 1      2      3      4      5      6      7      8      9     10     11     12     13     14     15       20     25
c4 = [0,0,0.7979,0.8862,0.9213,0.9400,0.9515,0.9594,0.9650,0.9693,0.9727,0.9754,0.9776,0.9794,0.9810,0.9823]#,0.9869,0.9896]
B3 = [0,0,     0,     0,     0,     0, 0.030, 0.118, 0.185, 0.239, 0.284, 0.321, 0.354, 0.382, 0.406, 0.428]#, 0.510, 0.565]
B4 = [0,0, 3.267, 2.568, 2.266, 2.089, 1.970, 1.882, 1.815, 1.761, 1.716, 1.679, 1.646, 1.618, 1.594, 1.572]#, 1.490, 1.435]
B5 = [0,0,     0,     0,     0,     0, 0.029, 0.113, 0.179, 0.232, 0.276, 0.313, 0.346, 0.374, 0.399, 0.421]#, 0.504, 0.559]
B6 = [0,0, 2.606, 2.276, 2.088, 1.964, 1.874, 1.806, 1.751, 1.707, 1.669, 1.637, 1.610, 1.585, 1.563, 1.544]#, 1.470, 1.420]
A3 = [0,0, 2.659, 1.954, 1.628, 1.427, 1.287, 1.182, 1.099, 1.032, 0.975, 0.927, 0.886, 0.850, 0.817, 0.789]#, 0.680, 0.606]
#########################################################################################
        
######################################################################        
    



class Toplevel1:
    
    global df
    
    def __init__(self, top=None):
        
        class SampleObj(object):
            def __init__(self, df):
                self.df = ''
        
        
        ###check float
        def isfloat(x):
            try:
                float(x)
            except ValueError:
                return False
            else:
                return True
        
        
        def file_open():
            filetypes = (
                ('text files', '*.csv'),
                ('All files', '*.*')
            )
            
            filename = fd.askopenfilename(
                title='Open a file',
                filetypes=filetypes)
        
            self.Entry1.delete(0, END)
            self.Entry1.insert(1,filename)
            
            f = open(filename, "r", errors='ignore')
    
    
    
            log = 'open file name: ' + filename + '\n'
            
    
    
            print('Preview to the first 2 lines: \n')
            print('first line:', f.readline())
            print('second line:', f.readline())
            
            
            eintrag = log + '\n' +  'Preview to the first 2 lines: \n' + 'first line:\n' + f.readline() + '\n' + 'second line:' + '\n' + f.readline()
            
            
            self.Scrolledtext1.insert('1.0', eintrag)
            f.close
    
                   
            
            
            return filename
        
        
        def file2_open():
            filetypes = (
                ('text files', '*.csv'),
                ('All files', '*.*')
            )
            
            filename = fd.askopenfilename(
                title='Open a file',
                filetypes=filetypes)
        
            self.Entry2.delete(0, END)
            self.Entry2.insert(1,filename)
            
            f = open(filename, "r", errors='ignore')
    
    
    
            log = 'open second file name: ' + filename + '\n'
            
    
    
            print('Preview to the first 2 lines: \n')
            print('first line:', f.readline())
            print('second line:', f.readline())
            
            
            eintrag = log + '\n' +  'Preview to the first 2 lines: \n' + 'first line:\n' + f.readline() + '\n' + 'second line:' + '\n' + f.readline()
            
            
            self.Scrolledtext1.insert('1.0', eintrag)
            f.close
    
                   
            
            
            return filename
        
        
        
        
        
        
        
        def read_csv():
            global df
            print ('File einlesen')
            
            fn = self.Entry1.get()
            
            if fn == '':
                tk.messagebox.showinfo(title='File is missing', message='No File chooesed')
            
            
            seperator = self.TCombobox1.get()
            comma = self.TCombobox2.get()
            head = self.TCombobox3.get()
            
            if seperator =='':
                seperator =','
                comma = '.'
                head ='no'
            elif seperator =='tab':
                seperator = '\t'
            elif seperator =='space':
                seperator = '\s+'
            
            if head =='yes':
                hd = 0
            elif head =='no':
                hd = 1
            
            
            df=pd.read_csv(fn,sep=seperator ,decimal=comma, header=hd, engine='python')
            data=pd.read_csv(fn,sep=seperator ,decimal=comma, header=hd, engine='python')
            #print(df)
            
            ##Tabelle + Formate einblenden
            self.Scrolledtext2.insert(END, df)
            self.Scrolledtext2.insert(END, df.dtypes)
            
            ##Tabelle darstellen            
            self.frame1.grid_columnconfigure(0, weight = 1)
            self.frame1.grid_rowconfigure(0, weight = 1)
            self.sheet = Sheet(self.frame1,
                               data=pd.read_csv(fn,sep=seperator ,decimal=comma, header=hd, engine='python').values.tolist())

            if head =='yes':
                self.sheet.headers(data.columns)
            
                
            self.sheet.enable_bindings()
            self.frame1.grid(row = 0, column = 0, sticky = "nswe")
            self.sheet.grid(row = 0, column = 0, sticky = "nswe")
            
            self.Scrolledtext1.insert(END, 30*'#')
            self.Scrolledtext1.insert(END, '\nCSV Data loaded')
            self.Scrolledtext1.insert(END, '\n')
            self.Scrolledtext1.insert(END, 30*'#')
            
            self.TCombobox9.configure(values=list(df.columns))
            self.TCombobox11.configure(values=list(df.columns))
            self.TCombobox14.configure(values=list(df.columns))
            

            values=df.select_dtypes(include=['float', 'int'])
            self.TCombobox4.configure(values=list(values.columns))
            self.TCombobox5.configure(values=list(df.columns))
            cat1=df.select_dtypes(include=['object', 'datetime'])
            self.TCombobox6.configure(values=list(cat1.columns))
            
            return (df)
        
        def read2_csv():
            global df2
            print ('File einlesen')
            
            fn = self.Entry2.get()
            
            if fn == '':
                tk.messagebox.showinfo(title='File is missing', message='No File chooesed')
            
            
            seperator = self.TCombobox16.get()
            comma = self.TCombobox17.get()
            head = self.TCombobox18.get()
            
            if seperator =='':
                seperator =','
                comma = '.'
                head ='no'
            elif seperator =='tab':
                seperator = '\t'
            elif seperator =='space':
                seperator = '\s+'
            
            if head =='yes':
                hd = 0
            elif head =='no':
                hd = 1
            
            
            df2=pd.read_csv(fn,sep=seperator ,decimal=comma, header=hd, engine='python')
            #data=pd.read_csv(fn,sep=seperator ,decimal=comma, header=hd, engine='python')
            #print(df)
            
            ##Tabelle + Formate einblenden
            #self.Scrolledtext2.insert(END, df)
            #self.Scrolledtext2.insert(END, df.dtypes)
            
            ##Tabelle darstellen            
            #self.frame1.grid_columnconfigure(0, weight = 1)
            #self.frame1.grid_rowconfigure(0, weight = 1)
            #self.sheet = Sheet(self.frame1,
            #                   data=pd.read_csv(fn,sep=seperator ,decimal=comma, header=hd, engine='python').values.tolist())

            #if head =='yes':
            #    self.sheet.headers(data.columns)
            
                
            #self.sheet.enable_bindings()
            #self.frame1.grid(row = 0, column = 0, sticky = "nswe")
            #self.sheet.grid(row = 0, column = 0, sticky = "nswe")
            
            self.Scrolledtext1.insert(END, 30*'#')
            self.Scrolledtext1.insert(END, '\nsecond CSV Data loaded')
            self.Scrolledtext1.insert(END, '\n')
            self.Scrolledtext1.insert(END, 30*'#')
            self.TCombobox20.configure(values=list(df2.columns))
            
            return (df2)
        
        
        
        
        
        
        
        def change_format():
            global df
            print('Change Format')
            print(df)
            
            curr_format = self.TCombobox9.get()
            
            format_col = df[curr_format].dtypes
            
            new_format = self.TCombobox10.get()
            
            if new_format =='datetime':
                df[curr_format] = df[curr_format].astype('datetime64[ns]')
            if new_format =='float':
                df[curr_format] = df[curr_format].astype(float)
            if new_format =='int':
                df[curr_format] = df[curr_format].astype(int)
            if new_format =='category':
                df[curr_format] = df[curr_format].astype('category')
            if new_format =='object':
                df[curr_format] = df[curr_format].astype(str)
            
            print(df[curr_format].dtypes)
            print(df.dtypes)
            return df
            
            
            
        def current_format():
            global df
            print('Current Format')
            
             
            
            curr_format = self.TCombobox9.get()
            
            format_col = df[curr_format].dtypes
            
            print (curr_format)
            print(format_col)
        
            self.Label12.configure(text=format_col)    
            
            if format_col =='object':
                self.value_list4 = ['object', 'datetime']
                self.TCombobox10.configure(values=self.value_list4)
            if format_col =='int':
                self.value_list4 = ['float']
                self.TCombobox10.configure(values=self.value_list4)
            if format_col =='int64':
                self.value_list4 = ['float']
                self.TCombobox10.configure(values=self.value_list4)
        
        def filter_col():
            print('filter col')
            filtercolumn = self.TCombobox11.get()
            #df[filtercolumn] =(df[filtercolumn].astype(str))
            list_o_filtercrit = df[filtercolumn].tolist()
            filtercontent = sorted(set(list_o_filtercrit))
            self.TCombobox13.configure(values=filtercontent)
            
            fileformat = df[filtercolumn].dtypes
            
            if fileformat =='int':
                self.value_list5 = ['==', '>=', '<=', '!=']
                self.TCombobox12.configure(values=self.value_list5)
            
            if fileformat =='float':
                self.value_list5 = ['==', '>=', '<=', '!=']
                self.TCombobox12.configure(values=self.value_list5)
            
            if fileformat =='int64':
                self.value_list5 = ['==', '>=', '<=', '!=']
                self.TCombobox12.configure(values=self.value_list5)
            
            if fileformat =='float64':
                self.value_list5 = ['==', '>=', '<=', '!=']
                self.TCombobox12.configure(values=self.value_list5)
            
            if fileformat =='datetime64[ns]':
                self.value_list5 = ['==', '>=', '<=', '!=']
                self.TCombobox12.configure(values=self.value_list5)
            
            if fileformat =='object':
                self.value_list5 = ['==','!=']
                self.TCombobox12.configure(values=self.value_list5)
            
            
            
        def set_filter():
            print('set filter')
            global df
            filtercolumn = self.TCombobox11.get()
            filtercrit = self.TCombobox12.get()
            filtercontent = self.TCombobox13.get()
            
            fileformat = df[filtercolumn].dtypes
            
            if fileformat == 'object':
                           
                if filtercrit =="==":
                    df = df[df[filtercolumn]==str(filtercontent)]
                if filtercrit =="!=":
                    df = df[df[filtercolumn]!=str(filtercontent)]
            
            if fileformat =='float':
                if filtercrit =="==":
                    df = df[df[filtercolumn]==float(filtercontent)]
                if filtercrit =="!=":
                    df = df[df[filtercolumn]!=float(filtercontent)]
                if filtercrit =="<=":
                    df = df[df[filtercolumn]<=float(filtercontent)]
                if filtercrit ==">=":
                    df = df[df[filtercolumn]>=float(filtercontent)]
            
            if fileformat =='int':
                if filtercrit =="==":
                    df = df[df[filtercolumn]==int(filtercontent)]
                if filtercrit =="!=":
                    df = df[df[filtercolumn]!=int(filtercontent)]
                if filtercrit =="<=":
                    df = df[df[filtercolumn]<=int(filtercontent)]
                if filtercrit ==">=":
                    df = df[df[filtercolumn]>=int(filtercontent)]
            
            
            if fileformat =='float64':
                if filtercrit =="==":
                    df = df[df[filtercolumn]==float(filtercontent)]
                if filtercrit =="!=":
                    df = df[df[filtercolumn]!=float(filtercontent)]
                if filtercrit =="<=":
                    df = df[df[filtercolumn]<=float(filtercontent)]
                if filtercrit ==">=":
                    df = df[df[filtercolumn]>=float(filtercontent)]
            
            if fileformat =='int64':
                if filtercrit =="==":
                    df = df[df[filtercolumn]==int(filtercontent)]
                if filtercrit =="!=":
                    df = df[df[filtercolumn]!=int(filtercontent)]
                if filtercrit =="<=":
                    df = df[df[filtercolumn]<=int(filtercontent)]
                if filtercrit ==">=":
                    df = df[df[filtercolumn]>=int(filtercontent)]
            
            if fileformat =='datetime64[ns]':
                if filtercrit =="==":
                    df = df[df[filtercolumn]==(filtercontent)]
                if filtercrit =="!=":
                    df = df[df[filtercolumn]!=(filtercontent)]
                if filtercrit =="<=":
                    df = df[df[filtercolumn]<=(filtercontent)]
                if filtercrit ==">=":
                    df = df[df[filtercolumn]>=(filtercontent)]
            
            
            print(df)
            
            ##Tabelle + Formate einblenden
            self.Scrolledtext2.insert(END, df)
            self.Scrolledtext2.insert(END, df.dtypes)
            
            ##Tabelle darstellen            
            self.frame1.grid_columnconfigure(0, weight = 1)
            self.frame1.grid_rowconfigure(0, weight = 1)
            self.sheet = Sheet(self.frame1,
                               data=df.values.tolist())
            
            
                
            self.sheet.enable_bindings()
            self.frame1.grid(row = 0, column = 0, sticky = "nswe")
            self.sheet.grid(row = 0, column = 0, sticky = "nswe")
             
        def sort_column():
            print('sort column')
            global df
            
            column_to_sort = self.TCombobox14.get()
            sort_direction = self.TCombobox15.get()
            
            if sort_direction == 'AZ':
                a_t_f = 1
            if sort_direction == 'ZA':
                a_t_f = 0
            
            
            df = df.sort_values(by=column_to_sort, ascending=a_t_f)
            
            print(df)
            
            ##Tabelle + Formate einblenden
            self.Scrolledtext2.insert(END, df)
            self.Scrolledtext2.insert(END, df.dtypes)
            
            ##Tabelle darstellen            
            self.frame1.grid_columnconfigure(0, weight = 1)
            self.frame1.grid_rowconfigure(0, weight = 1)
            self.sheet = Sheet(self.frame1,
                               data=df.values.tolist())
            
            
                
            self.sheet.enable_bindings()
            self.frame1.grid(row = 0, column = 0, sticky = "nswe")
            self.sheet.grid(row = 0, column = 0, sticky = "nswe")
        
        def join_table():
            global df, df2, result_df
            
            
            column_T2 = self.TCombobox20.get()
            art_to_join = self.TCombobox21.get()
            
            if art_to_join == 'outer':
                df = pd.merge(df, df2, how='outer', on=column_T2)
            elif art_to_join =='inner':
                df = pd.merge(df, df2, how='inner', on=column_T2)
            elif art_to_join =='left outer':
                df = pd.merge(df, df2, how='outer', on=column_T2)
            elif art_to_join =='right outer':
                df = pd.merge(df, df2, how='outer', on=column_T2)
            
            print(df)
            
            ##Tabelle darstellen            
            self.frame1.grid_columnconfigure(0, weight = 1)
            self.frame1.grid_rowconfigure(0, weight = 1)
            self.sheet = Sheet(self.frame1,
                               data=df.values.tolist())
            
            self.sheet.headers(df.columns)
                
            self.sheet.enable_bindings()
            self.frame1.grid(row = 0, column = 0, sticky = "nswe")
            self.sheet.grid(row = 0, column = 0, sticky = "nswe")
        
        
        def save_CSV():
            print('Save File')
            global df
            
            filetypes = (
                ('text files', '*.csv'),
                ('All files', '*.*')
            )
            
            filename = fd.asksaveasfile(
                title='Save a file',
                filetypes=filetypes)
            
            
            df.to_csv(filename, sep=';', decimal=',', header =True)
        
        def append_CSV():
            print('Append Dataframe')
            global df, df2
            
            if len(df.columns) != len(df2.columns):
                print("Columns do not match!! Dataframe has " + str(len(df.columns)) + " columns. CSV file has " + str(len(df2.columns)) + " columns.")            
                print('please try again!')
        
                #raise Exception("Columns do not match!! Dataframe has " + str(len(df.columns)) + " columns. CSV file has " + str(len(pd.read_csv(add_table, nrows=1, sep=trennzeichen).columns)) + " columns.")
            elif not (df.columns == df2.columns).all():
                print("Columns and column order of dataframe and csv file do not match!!")
                print('please try again!')
                #raise Exception("Columns and column order of dataframe and csv file do not match!!")
            else:
                df = df.append(df2)
        
        
        
            print(df)
    
            ##Tabelle darstellen            
            self.frame1.grid_columnconfigure(0, weight = 1)
            self.frame1.grid_rowconfigure(0, weight = 1)
            self.sheet = Sheet(self.frame1,
                               data=df.values.tolist())
            
            self.sheet.headers(df.columns)
                
            self.sheet.enable_bindings()
            self.frame1.grid(row = 0, column = 0, sticky = "nswe")
            self.sheet.grid(row = 0, column = 0, sticky = "nswe")
            
        def plot_df():
            print('plotvalues')
            global df
            plotfunction = self.TCombobox7.get()
            messwert = self.TCombobox4.get()
            ut = self.Entry54.get()
            lt = self.Entry55.get()
            
            print(plotfunction)
            
            if plotfunction =='Descriptive Statistics':
                besch_stat()
            elif plotfunction =='Time Series Plot':
                trend()
            elif plotfunction =='Boxplot':
                boxplot_single(df, messwert, lt, ut)
            


    
##################################################
##statistics
###########################################################################

        def table_statistics():
            global df
            filename = 'stat_df.csv'
            print('Table Statistics')
            
            
            stat = df.describe()
            
            
            self.Scrolledtext1.insert(END, 30*'#')
            self.Scrolledtext1.insert(END, '\n')
            self.Scrolledtext1.insert(END, stat)
            self.Scrolledtext1.insert(END, '\n')
            self.Scrolledtext1.insert(END, 30*'#')            
            
            df_stats = df.describe(include='all')
            df_stats.to_csv(filename, sep=';', decimal=',', header =True)
            print(tabulate(df_stats, headers='keys', tablefmt='psql'))
            
            df2=pd.read_csv(filename,sep=';' ,decimal=',', header=0, engine='python')
            file_in_html(df2)

        ####truncate values
        def truncate(n, decimals=0):
                multiplier = 10 ** decimals
                return int(n * multiplier) / multiplier

###########################################################################        
        #Beschreibende Statistik
        def besch_stat():
            global df            
            
            
            messwert = self.TCombobox4.get()
            
                        
            
            
            y = df[messwert]
            y_val = messwert
            
            
        
            print('Descriptive Statistic \n')
            
            df['number'] = range(1, len(df) + 1)
            
            x = df['number']
            stat, p = shapiro(y)
                    
            ###one side tolerance ut / normal distribution
            if p >= 0.05:
                #normal verteilt
                print('normal distribution')
                
                mean_y = y.mean()
                std_y = y.std()
                count_y = len(y)
                mean_p_3s = mean_y + 3*std_y
                mean_m_3s = mean_y - 3*std_y
                min_y = y.min()
                max_y = y.max()
                
                t_mean_y = truncate(mean_y, 5)
                t_std_y = truncate(std_y, 5)
                t_mean_p_3s = truncate(mean_p_3s, 5)
                t_mean_m_3s = truncate(mean_m_3s, 5)
                
                text = 'distribution should follow normal distribution'
                
                
                
                
                eintrag = 'Mean: ' + str(t_mean_y) + '\ns: ' + str(t_std_y) + '\n \n+3s: ' + str(t_mean_p_3s) + '\n-3s: ' + str(t_mean_m_3s) + '\n \nMIN: ' + str(min_y) + '\nMAX: '+ str(max_y) + '\nn: ' + str(count_y) + '\n\n' + text
                
                print(eintrag +'\np-value:' + str(p))
                ##graphic
                        
                plt.figure(figsize=(6, 4))
                plt.subplot(221) # äquivalent zu: plt.subplot(2, 2, 1)
                sns.histplot(y, kde=True)
                plt.title("Descriptive Statistic Value Column: " + messwert)
                plt.subplot(222)
                sns.lineplot(x=x, y=y_val, estimator=None, lw=1, marker='o', data=df)
                #df.plot(y_val)
                plt.axhline(y=mean_y,linewidth=2, color='g')
                plt.axhline(y=mean_p_3s,linewidth=2, color='orange')
                plt.axhline(y=mean_m_3s,linewidth=2, color='orange')
                plt.subplot(223)
                sns.boxplot(x=y)
                plt.subplot(224)
                plt.text(0.1,0.5,eintrag, 
                         ha='left', va='center',
                         fontsize=12)
                plt.axis('off')
                #plt.title(label_chart, fontdict=None, loc='center', pad=None)
                
                plt.show()
                
            else:
                
                median_y = y.quantile(0.5)
                        
                upper_q_y = y.quantile(0.99869)
                        
                lower_q_y = y.quantile(0.00135)
                min_y = y.min()
                max_y = y.max()
                        
                median_y = truncate(median_y, 5)
                upper_q_y = truncate(upper_q_y, 5)
                lower_q_y = truncate(lower_q_y, 5)
                min_y = truncate(min_y, 5)
                max_y =truncate(max_y, 5)
                count_y = len(y)
                
                text = 'distribution should not follow normal distribution'
                
                
                
                
                eintrag = 'Median: ' + str(median_y) + '\n\nQ0.998: '  + str(upper_q_y) + '\nQ0.001: ' + str(lower_q_y) + '\n \nMIN: ' + str(min_y) + '\nMAX: '+ str(max_y) + '\nn: ' + str(count_y) + '\n\n' + text
                
                print(eintrag +'\np-value:' + str(p))
                
                ##graphic
                        
                plt.figure(figsize=(6, 4))
                plt.subplot(221) # äquivalent zu: plt.subplot(2, 2, 1)
                sns.histplot(y, kde=True)
                plt.title("Descriptive Statistic Value Column: " + messwert)
                plt.subplot(222)
                sns.lineplot(x=x, y=y_val, estimator=None, lw=1, marker='o', data=df)
                #df.plot(y_val)
                plt.axhline(y=median_y,linewidth=2, color='g')
                plt.axhline(y=upper_q_y,linewidth=2, color='orange')
                plt.axhline(y=lower_q_y,linewidth=2, color='orange')
                plt.subplot(223)
                sns.boxplot(x=y)
                plt.subplot(224)
                plt.text(0.1,0.5,eintrag, 
                         ha='left', va='center',
                         fontsize=12)
                plt.axis('off')
                #plt.title(label_chart, fontdict=None, loc='center', pad=None)
                
                plt.show()
            
            texteintrag = '#'*30 + '\n' + 'Descriptive Statitics' + '\n' + eintrag +'\np-value:' + str(p)+ '\n' + '#'*30
            
            self.Scrolledtext1.insert(END, texteintrag)
        
        #######################################################################

        #Time Series Plot
        def trend():
            print('Time Series Plot')
            global df
            
            
            messwert = self.TCombobox4.get()
            spdt = self.TCombobox5.get()
            tolerance ='ohne'
            
            
            y = messwert
            x = spdt
            #ut = 'UTG'
            #ot = 'OTG'
            yt = df[messwert]
    
            mean_y = yt.mean()
            
            
            
            df[spdt] = df[spdt].astype('datetime64[ns]')
            
            df = df.sort_values(by=spdt, ascending=1)
            
            
            
            if tolerance =='OT und UT':
                sns.lineplot(data = df, x=x, y=y, marker='o')
                sns.lineplot(data = df, x=x, y=ut, color='r')
                sns.lineplot(data = df, x=x, y=ot, color='r')
                plt.axhline(y=mean_y,linewidth=2, color='g')
                plt.xticks(rotation=25)
                plt.title("Time Series Plot Column: "+ messwert)
                plt.show()
            elif tolerance == '':
                sns.lineplot(data = df, x=x, y=y, marker='o')
                sns.lineplot(data = df, x=x, y=ut, color='r')
                sns.lineplot(data = df, x=x, y=ot, color='r')
                plt.axhline(y=mean_y,linewidth=2, color='g')
                plt.xticks(rotation=25)
                plt.title("Time Series Plot Column: "+ messwert)
                plt.show()
            elif tolerance == 'einseitig oben':
                sns.lineplot(data = df, x=x, y=y, marker='o')
                
                sns.lineplot(data = df, x=x, y=ot, color='r')
                plt.axhline(y=mean_y,linewidth=2, color='g')
                plt.xticks(rotation=25)
                plt.title("Time Series Plot Column: "+ messwert)
                plt.show()
            
            elif tolerance == 'einseitig unten':
                sns.lineplot(data = df, x=x, y=y, marker='o')
                
                sns.lineplot(data = df, x=x, y=ut, color='r')
                plt.axhline(y=mean_y,linewidth=2, color='g')
                plt.xticks(rotation=25)
                plt.title("Time Series Plot Column: "+ messwert)
                plt.show()
                
            elif tolerance =='ohne':
                sns.lineplot(data = df, x=x, y=y, marker='o')
                
                plt.axhline(y=mean_y,linewidth=2, color='g')
                plt.xticks(rotation=25)
                plt.title("Time Series Plot Column: "+ messwert)
                plt.show()
            
            texteintrag = '\n' + '#'*30 + '\n' + 'Time Series Plot \nColumn:' + messwert + '\n' + 30*'#'
            
            
            self.Scrolledtext1.insert(END, texteintrag)






        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1078x688+239+0")
        top.minsize(1, 1)
        top.maxsize(1351, 738)
        top.resizable(1,  1)
        top.title("CSVpySTAT by Ricky Helfgen")
        top.configure(highlightcolor="black")

        self.top = top
        self.combobox = tk.StringVar()

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        
        self.TNotebook1 = ttk.Notebook(self.top)
        self.TNotebook1.place(relx=0.019, rely=0.015, relheight=0.459
                , relwidth=0.948)
        self.TNotebook1.configure(takefocus="")
        
        self.TNotebook1_t1 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t1, padding=4)
        self.TNotebook1.tab(0, text='''CSV Load''', compound="left"
                ,underline='''-1''', )
        
        self.TNotebook1_t2 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t2, padding=4)
        self.TNotebook1.tab(1, text='''Format table''', compound="left"
                ,underline='''-1''', )
        
        self.TNotebook1_t3 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t3, padding=4)
        self.TNotebook1.tab(2, text='''Statistics''', compound="left"
                ,underline='''-1''', )
        
        self.TNotebook1_t4 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t4, padding=4)
        self.TNotebook1.tab(3, text='''join/append''', compound="left"
                ,underline='''-1''', )
        
        self.TNotebook1_t5 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t5, padding=4)
        self.TNotebook1.tab(4, text='''Datatable''', compound="left"
                ,underline='''-1''', )
        self.TNotebook1_t5.grid_columnconfigure(0, weight = 1)
        self.TNotebook1_t5.grid_rowconfigure(0, weight = 1)
        
        ##tab5
        self.frame1 = tk.Frame(self.TNotebook1_t5)
        self.frame1.place(relx=0.0, rely=0.06, height=23, width=79)
        self.frame1.grid_columnconfigure(0, weight = 1)
        self.frame1.grid_rowconfigure(0, weight = 1)
        
        ###tab1
        self.Entry1 = tk.Entry(self.TNotebook1_t1)
        self.Entry1.place(relx=0.133, rely=0.069, height=23, relwidth=0.182)
        self.Entry1.configure(background="white")
        self.Entry1.configure(font="TkFixedFont")

        self.Label1 = tk.Label(self.TNotebook1_t1)
        self.Label1.place(relx=0.02, rely=0.069, height=21, width=79)
        self.Label1.configure(anchor='w')
        self.Label1.configure(compound='left')
        self.Label1.configure(text='''Filename:''')

        self.Button1 = tk.Button(self.TNotebook1_t1)
        self.Button1.place(relx=0.333, rely=0.069, height=23, width=43)
        self.Button1.configure(borderwidth="2")
        self.Button1.configure(compound='left')
        self.Button1.configure(command=file_open)
        self.Button1.configure(text='''...''')

        self.Button5 = tk.Button(self.TNotebook1_t1)
        self.Button5.place(relx=0.270, rely=0.800, height=23, width=100)
        self.Button5.configure(borderwidth="2")
        self.Button5.configure(compound='left')
        self.Button5.configure(command=read_csv)
        self.Button5.configure(text='''import csv''')
        

        self.Label2 = tk.Label(self.TNotebook1_t1)
        self.Label2.place(relx=0.02, rely=0.241, height=21, width=89)
        self.Label2.configure(anchor='w')
        self.Label2.configure(compound='left')
        self.Label2.configure(text='''Delimeter:''')

        self.TCombobox1 = ttk.Combobox(self.TNotebook1_t1)
        self.TCombobox1.place(relx=0.137, rely=0.241, relheight=0.072
                , relwidth=0.125)
        self.value_list1 = [',',';','space','tab']
        self.TCombobox1.configure(values=self.value_list1)
        self.TCombobox1.configure(takefocus="")

        self.Label3 = tk.Label(self.TNotebook1_t1)
        self.Label3.place(relx=0.02, rely=0.414, height=21, width=63)
        self.Label3.configure(anchor='w')
        self.Label3.configure(compound='left')
        self.Label3.configure(text='''Coma:''')

        self.TCombobox2 = ttk.Combobox(self.TNotebook1_t1)
        self.TCombobox2.place(relx=0.137, rely=0.414, relheight=0.072
                , relwidth=0.174)
        #self.TCombobox2.configure(textvariable=self.combobox)
        self.value_list2 = ['.',',']
        self.TCombobox2.configure(values=self.value_list2)
        self.TCombobox2.configure(takefocus="")

        self.Scrolledtext2 = ScrolledText(self.TNotebook1_t1)
        self.Scrolledtext2.place(relx=0.402, rely=0.034, relheight=0.934
                , relwidth=0.59)
        self.Scrolledtext2.configure(background="white")
        self.Scrolledtext2.configure(font="TkTextFont")
        self.Scrolledtext2.configure(insertborderwidth="3")
        self.Scrolledtext2.configure(selectbackground="blue")
        self.Scrolledtext2.configure(selectforeground="white")
        self.Scrolledtext2.configure(wrap="none")

        self.Label4 = tk.Label(self.TNotebook1_t1)
        self.Label4.place(relx=0.02, rely=0.586, height=21, width=70)
        self.Label4.configure(anchor='w')
        self.Label4.configure(compound='left')
        self.Label4.configure(text='''Header:''')

        self.TCombobox3 = ttk.Combobox(self.TNotebook1_t1)
        self.TCombobox3.place(relx=0.137, rely=0.572, relheight=0.072
                , relwidth=0.075)
        #self.TCombobox3.configure(textvariable=self.combobox)
        self.value_list3 = ['yes','no']
        self.TCombobox3.configure(values=self.value_list3)
        self.TCombobox3.configure(takefocus="")
        
        ##tab2        
        self.Label10 = tk.Label(self.TNotebook1_t2)
        self.Label10.place(relx=0.02, rely=0.034, height=21, width=74)
        self.Label10.configure(anchor='w')
        self.Label10.configure(compound='left')
        self.Label10.configure(text='''Column:''')

        self.TCombobox9 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox9.place(relx=0.175, rely=0.034, relheight=0.072
                , relwidth=0.175)
        self.TCombobox9.configure(takefocus="")

        self.Button5 = tk.Button(self.TNotebook1_t2)
        self.Button5.place(relx=0.25, rely=0.138, height=25, width=25)
        self.Button5.configure(borderwidth="2")
        self.Button5.configure(compound='left')
        self.Button5.configure(command=current_format)
        self.Button5.configure(text='''...''')
        
        
    
        self.Label11 = tk.Label(self.TNotebook1_t2)
        self.Label11.place(relx=0.02, rely=0.138, height=21, width=115)
        self.Label11.configure(anchor='w')
        self.Label11.configure(compound='left')
        self.Label11.configure(text='''Current Format:''')

        self.Label12 = tk.Label(self.TNotebook1_t2)
        self.Label12.place(relx=0.175, rely=0.138, height=21, width=80)
        self.Label12.configure(anchor='w')
        self.Label12.configure(compound='left')
        self.Label12.configure(text='''Format''')

        self.Label13 = tk.Label(self.TNotebook1_t2)
        self.Label13.place(relx=0.02, rely=0.241, height=21, width=139)
        self.Label13.configure(anchor='w')
        self.Label13.configure(compound='left')
        self.Label13.configure(text='''choose new Format:''')

        self.TCombobox10 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox10.place(relx=0.175, rely=0.241, relheight=0.072
                , relwidth=0.174)
        self.value_list4 = ['int','float','object','string', 'datetime']
        self.TCombobox10.configure(values=self.value_list4)
        self.TCombobox10.configure(takefocus="")

        self.Button4 = tk.Button(self.TNotebook1_t2)
        self.Button4.place(relx=0.175, rely=0.345, height=33, width=123)
        self.Button4.configure(borderwidth="2")
        self.Button4.configure(compound='left')
        self.Button4.configure(text='''set new format''')
        self.Button4.configure(command = change_format)
        
        
        self.Label14 = tk.Label(self.TNotebook1_t2)
        self.Label14.place(relx=0.4, rely=0.034, height=21, width=139)
        self.Label14.configure(anchor='w')
        self.Label14.configure(compound='left')
        self.Label14.configure(text='''Filter Column:''')
        
        self.TCombobox11 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox11.place(relx=0.50, rely=0.034, relheight=0.072
                , relwidth=0.175)
        self.TCombobox11.configure(takefocus="")
        
        
        self.Label15 = tk.Label(self.TNotebook1_t2)
        self.Label15.place(relx=0.4, rely=0.15, height=21, width=139)
        self.Label15.configure(anchor='w')
        self.Label15.configure(compound='left')
        self.Label15.configure(text='''Criterium:''')
        
        self.TCombobox12 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox12.place(relx=0.50, rely=0.15, relheight=0.072
                , relwidth=0.175)
        self.value_list5 = ['==', '>=', '<=', '!=']
        self.TCombobox12.configure(values=self.value_list5)
        self.TCombobox12.configure(takefocus="")
        
        
        self.Label16 = tk.Label(self.TNotebook1_t2)
        self.Label16.place(relx=0.4, rely=0.25, height=21, width=60)
        self.Label16.configure(anchor='w')
        self.Label16.configure(compound='left')
        self.Label16.configure(text='''Content:''')
        
        self.Button8 = tk.Button(self.TNotebook1_t2)
        self.Button8.place(relx=0.64, rely=0.25, height=33, width=30)
        self.Button8.configure(borderwidth="2")
        self.Button8.configure(compound='left')
        self.Button8.configure(text='''...''')
        self.Button8.configure(command = filter_col)
        
        
        self.TCombobox13 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox13.place(relx=0.50, rely=0.25, relheight=0.072
                , relwidth=0.12)
        self.TCombobox13.configure(takefocus="")
        
        self.Button6 = tk.Button(self.TNotebook1_t2)
        self.Button6.place(relx=0.5, rely=0.345, height=33, width=123)
        self.Button6.configure(borderwidth="2")
        self.Button6.configure(compound='left')
        self.Button6.configure(text='''set new filter''')
        self.Button6.configure(command = set_filter)
        
        
        self.Label17 = tk.Label(self.TNotebook1_t2)
        self.Label17.place(relx=0.7, rely=0.034, height=21, width=139)
        self.Label17.configure(anchor='w')
        self.Label17.configure(compound='left')
        self.Label17.configure(text='''Sort Column:''')
        
        self.TCombobox14 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox14.place(relx=0.80, rely=0.034, relheight=0.072
                , relwidth=0.175)
        
        self.TCombobox14.configure(takefocus="")
        
        
        self.Label18 = tk.Label(self.TNotebook1_t2)
        self.Label18.place(relx=0.7, rely=0.15, height=21, width=139)
        self.Label18.configure(anchor='w')
        self.Label18.configure(compound='left')
        self.Label18.configure(text='''direction''')
        
        self.TCombobox15 = ttk.Combobox(self.TNotebook1_t2)
        self.TCombobox15.place(relx=0.80, rely=0.15, relheight=0.072
                , relwidth=0.175)
        self.value_list6 = ['AZ', 'ZA']
        self.TCombobox15.configure(values=self.value_list6)
        self.TCombobox15.configure(takefocus="")
        
        self.Button7 = tk.Button(self.TNotebook1_t2)
        self.Button7.place(relx=0.8, rely=0.345, height=33, width=123)
        self.Button7.configure(borderwidth="2")
        self.Button7.configure(compound='left')
        self.Button7.configure(text='''sort''')
        self.Button7.configure(command = sort_column)
        
        ###################################################
        ##Tab3
        
        self.Label51 = tk.Label(self.TNotebook1_t3)
        self.Label51.place(relx=0.02, rely=0.034, height=21, width=150)
        self.Label51.configure(anchor='w')
        self.Label51.configure(compound='left')
        self.Label51.configure(text='''Statistics 1 Column:''')
        
        self.Label5 = tk.Label(self.TNotebook1_t3)
        self.Label5.place(relx=0.02, rely=0.172, height=21, width=112)
        self.Label5.configure(anchor='w')
        self.Label5.configure(compound='left')
        self.Label5.configure(text='''Y Value Column:''')

        self.TCombobox4 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox4.place(relx=0.131, rely=0.172, relheight=0.072
                , relwidth=0.175)
        self.TCombobox4.configure(takefocus="")

        self.Label6 = tk.Label(self.TNotebook1_t3)
        self.Label6.place(relx=0.02, rely=0.3, height=21, width=100)
        self.Label6.configure(anchor='w')
        self.Label6.configure(compound='left')
        self.Label6.configure(text='''X Axis Column:''')

        self.TCombobox5 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox5.place(relx=0.131, rely=0.3, relheight=0.072
                , relwidth=0.175)
        self.TCombobox5.configure(takefocus="")

        self.Label7 = tk.Label(self.TNotebook1_t3)
        self.Label7.place(relx=0.02, rely=0.45, height=21, width=110)
        self.Label7.configure(anchor='w')
        self.Label7.configure(compound='left')
        self.Label7.configure(text='''Group Column:''')

        self.TCombobox6 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox6.place(relx=0.131, rely=0.45, relheight=0.072
                , relwidth=0.174)
        self.TCombobox6.configure(takefocus="")

        self.Label8 = tk.Label(self.TNotebook1_t3)
        self.Label8.place(relx=0.02, rely=0.6, height=21, width=79)
        self.Label8.configure(anchor='w')
        self.Label8.configure(compound='left')
        self.Label8.configure(text='''Diagram:''')

        self.TCombobox7 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox7.place(relx=0.13, rely=0.6, relheight=0.072
                , relwidth=0.175)
        self.value_list10 = ['Descriptive Statistics','Time Series Plot', 'Boxplot', 'Violin Plot', 'Individual Plot']
        self.TCombobox7.configure(values=self.value_list10)
        self.TCombobox7.configure(takefocus="")

        

        self.Button2 = tk.Button(self.TNotebook1_t3)
        self.Button2.place(relx=0.52, rely=0.6, height=33, width=113)
        self.Button2.configure(borderwidth="2")
        self.Button2.configure(compound='left')
        self.Button2.configure(command = plot_df)
        self.Button2.configure(text='''Plot''')

        self.Button3 = tk.Button(self.TNotebook1_t3)
        self.Button3.place(relx=0.02, rely=0.85, height=33, width=153)
        self.Button3.configure(borderwidth="2")
        self.Button3.configure(compound='left')
        self.Button3.configure(command=table_statistics)
        self.Button3.configure(text='''Table Statitics''')
        
        
        self.Label52 = tk.Label(self.TNotebook1_t3)
        self.Label52.place(relx=0.333, rely=0.034, height=21, width=150)
        self.Label52.configure(anchor='w')
        self.Label52.configure(compound='left')
        self.Label52.configure(text='''3D Plots:''')

        
        self.Label9 = tk.Label(self.TNotebook1_t3)
        self.Label9.place(relx=0.333, rely=0.172, height=21, width=118)
        self.Label9.configure(anchor='w')
        self.Label9.configure(compound='left')
        self.Label9.configure(text='''z Value Column:''')

        self.TCombobox8 = ttk.Combobox(self.TNotebook1_t3)
        self.TCombobox8.place(relx=0.451, rely=0.172, relheight=0.072
                , relwidth=0.175)
        self.TCombobox8.configure(takefocus="")
        
        self.Label53 = tk.Label(self.TNotebook1_t3)
        self.Label53.place(relx=0.7, rely=0.034, height=21, width=150)
        self.Label53.configure(anchor='w')
        self.Label53.configure(compound='left')
        self.Label53.configure(text='''Tolerances:''')
        
        self.Label54 = tk.Label(self.TNotebook1_t3)
        self.Label54.place(relx=0.7, rely=0.172, height=21, width=118)
        self.Label54.configure(anchor='w')
        self.Label54.configure(compound='left')
        self.Label54.configure(text='''Upper Tolerance:''')

        self.Entry54 = tk.Entry(self.TNotebook1_t3)
        self.Entry54.place(relx=0.85, rely=0.172, height=23, relwidth=0.1)
        self.Entry54.configure(background="white")
        self.Entry54.configure(font="TkFixedFont")
        
        self.Label55 = tk.Label(self.TNotebook1_t3)
        self.Label55.place(relx=0.7, rely=0.3, height=21, width=118)
        self.Label55.configure(anchor='w')
        self.Label55.configure(compound='left')
        self.Label55.configure(text='''Lower Tolerance:''')

        self.Entry55 = tk.Entry(self.TNotebook1_t3)
        self.Entry55.place(relx=0.85, rely=0.3, height=23, relwidth=0.1)
        self.Entry55.configure(background="white")
        self.Entry55.configure(font="TkFixedFont")
        
        #tab4
        
        self.Entry2 = tk.Entry(self.TNotebook1_t4)
        self.Entry2.place(relx=0.133, rely=0.069, height=23, relwidth=0.182)
        self.Entry2.configure(background="white")
        self.Entry2.configure(font="TkFixedFont")

        self.Label19 = tk.Label(self.TNotebook1_t4)
        self.Label19.place(relx=0.02, rely=0.069, height=21, width=79)
        self.Label19.configure(anchor='w')
        self.Label19.configure(compound='left')
        self.Label19.configure(text='''Filename:''')

        self.Button8 = tk.Button(self.TNotebook1_t4)
        self.Button8.place(relx=0.333, rely=0.069, height=23, width=43)
        self.Button8.configure(borderwidth="2")
        self.Button8.configure(compound='left')
        self.Button8.configure(command=file2_open)
        self.Button8.configure(text='''...''')

        self.Button9 = tk.Button(self.TNotebook1_t4)
        self.Button9.place(relx=0.250, rely=0.700, height=23, width=130)
        self.Button9.configure(borderwidth="2")
        self.Button9.configure(compound='left')
        self.Button9.configure(command=read2_csv)
        self.Button9.configure(text='''read second CSV''')
        

        self.Label20 = tk.Label(self.TNotebook1_t4)
        self.Label20.place(relx=0.02, rely=0.241, height=21, width=89)
        self.Label20.configure(anchor='w')
        self.Label20.configure(compound='left')
        self.Label20.configure(text='''Delimeter:''')

        self.TCombobox16 = ttk.Combobox(self.TNotebook1_t4)
        self.TCombobox16.place(relx=0.137, rely=0.241, relheight=0.072
                , relwidth=0.125)
        self.value_list6 = [',',';','space','tab']
        self.TCombobox16.configure(values=self.value_list6)
        self.TCombobox16.configure(takefocus="")

        self.Label21 = tk.Label(self.TNotebook1_t4)
        self.Label21.place(relx=0.02, rely=0.414, height=21, width=63)
        self.Label21.configure(anchor='w')
        self.Label21.configure(compound='left')
        self.Label21.configure(text='''Coma:''')

        self.TCombobox17 = ttk.Combobox(self.TNotebook1_t4)
        self.TCombobox17.place(relx=0.137, rely=0.414, relheight=0.072
                , relwidth=0.174)
        #self.TCombobox2.configure(textvariable=self.combobox)
        self.value_list7 = ['.',',']
        self.TCombobox17.configure(values=self.value_list7)
        self.TCombobox17.configure(takefocus="")

        self.Label22 = tk.Label(self.TNotebook1_t4)
        self.Label22.place(relx=0.02, rely=0.586, height=21, width=70)
        self.Label22.configure(anchor='w')
        self.Label22.configure(compound='left')
        self.Label22.configure(text='''Header:''')

        self.TCombobox18 = ttk.Combobox(self.TNotebook1_t4)
        self.TCombobox18.place(relx=0.137, rely=0.572, relheight=0.072
                , relwidth=0.075)
        #self.TCombobox3.configure(textvariable=self.combobox)
        self.value_list8 = ['yes','no']
        self.TCombobox18.configure(values=self.value_list8)
        self.TCombobox18.configure(takefocus="")

        
        
        self.Label24 = tk.Label(self.TNotebook1_t4)
        self.Label24.place(relx=0.4, rely=0.2, height=21, width=125)
        self.Label24.configure(anchor='w')
        self.Label24.configure(compound='left')
        self.Label24.configure(text='''Key Column:''')

        self.TCombobox20 = ttk.Combobox(self.TNotebook1_t4)
        self.TCombobox20.place(relx=0.53, rely=0.2, relheight=0.072
                , relwidth=0.17)
        #self.TCombobox3.configure(textvariable=self.combobox)
        self.TCombobox20.configure(takefocus="")

        self.Label25 = tk.Label(self.TNotebook1_t4)
        self.Label25.place(relx=0.4, rely=0.32, height=21, width=125)
        self.Label25.configure(anchor='w')
        self.Label25.configure(compound='left')
        self.Label25.configure(text='''How to join:''')

        self.TCombobox21 = ttk.Combobox(self.TNotebook1_t4)
        self.TCombobox21.place(relx=0.53, rely=0.32, relheight=0.072
                , relwidth=0.10)
        self.value_list9 = ['inner','left outer', 'right outer', 'full outer']
        self.TCombobox21.configure(values=self.value_list9)
        #self.TCombobox3.configure(textvariable=self.combobox)
        self.TCombobox21.configure(takefocus="")
        
        self.Button10 = tk.Button(self.TNotebook1_t4)
        self.Button10.place(relx=0.58, rely=0.700, height=23, width=130)
        self.Button10.configure(borderwidth="2")
        self.Button10.configure(compound='left')
        self.Button10.configure(command=join_table)
        self.Button10.configure(text='''join table''')
        
        self.Button11 = tk.Button(self.TNotebook1_t4)
        self.Button11.place(relx=0.8, rely=0.700, height=23, width=130)
        self.Button11.configure(borderwidth="2")
        self.Button11.configure(compound='left')
        self.Button11.configure(command=append_CSV)
        self.Button11.configure(text='''append table''')
        
        self.Button12 = tk.Button(self.TNotebook1_t4)
        self.Button12.place(relx=0.25, rely=0.8, height=23, width=130)
        self.Button12.configure(borderwidth="2")
        self.Button12.configure(compound='left')
        self.Button12.configure(command=save_CSV)
        self.Button12.configure(text='''save file''')


        self.Scrolledtext1 = ScrolledText(self.top)
        self.Scrolledtext1.place(relx=0.019, rely=0.494, relheight=0.467
                , relwidth=0.957)
        self.Scrolledtext1.configure(background="white")
        self.Scrolledtext1.configure(font="TkTextFont")
        self.Scrolledtext1.configure(insertborderwidth="3")
        self.Scrolledtext1.configure(selectbackground="blue")
        self.Scrolledtext1.configure(selectforeground="white")
        self.Scrolledtext1.configure(wrap="none")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    CSVpySTAT_support.main()

if __name__ == '__main__':
    CSVpySTAT_support.main()




